// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: topic.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getTopicByIDWithVideos = `-- name: GetTopicByIDWithVideos :one
SELECT 
  t.id, t.number, t.name, t.playlist_id, t.updated_at, t.created_at, t.updated_by,
  COALESCE(
    JSON_AGG(
      JSON_BUILD_OBJECT(
        'id', yv.id,
        'video_id', yv.video_id,
        'title', yv.title,
        'video_date', yv.video_date,
        'channel_title', yv.channel_title,
        'thumbnail_url', yv.thumbnail_url,
        'expiry_at', yv.expiry_at,
        'updated_at', yv.updated_at,
        'created_at', yv.created_at,
        'updated_by', yv.updated_by
      )
    ) FILTER (WHERE yv.id IS NOT NULL),
    '[]'::json
  ) AS videos
FROM 
  topic t
LEFT JOIN 
  youtube_video yv ON t.id = yv.topic_id
WHERE 
  t.id = $1
GROUP BY 
  t.id
`

type GetTopicByIDWithVideosRow struct {
	ID         uuid.UUID
	Number     sql.NullInt32
	Name       sql.NullString
	PlaylistID uuid.UUID
	UpdatedAt  sql.NullTime
	CreatedAt  sql.NullTime
	UpdatedBy  uuid.NullUUID
	Videos     interface{}
}

// unused, kept for reference, refer topicrepository for correct one
func (q *Queries) GetTopicByIDWithVideos(ctx context.Context, id uuid.UUID) (GetTopicByIDWithVideosRow, error) {
	row := q.db.QueryRowContext(ctx, getTopicByIDWithVideos, id)
	var i GetTopicByIDWithVideosRow
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Name,
		&i.PlaylistID,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.Videos,
	)
	return i, err
}
