// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getMessagePageByCommunityID = `-- name: GetMessagePageByCommunityID :many
SELECT m.id, m.user_id, m.community_id, m.content, m.updated_at, m.created_at, m.updated_by, au.username, au.profile_picture_url, au.name, au.color
FROM "message" m
JOIN app_user au ON au.user_id = m.user_id
WHERE
    m.community_id = $1
    AND m.created_at < $2
ORDER BY m.created_at DESC
`

type GetMessagePageByCommunityIDParams struct {
	CommunityID uuid.UUID
	CreatedAt   sql.NullTime
}

type GetMessagePageByCommunityIDRow struct {
	ID                uuid.UUID
	UserID            uuid.UUID
	CommunityID       uuid.UUID
	Content           sql.NullString
	UpdatedAt         sql.NullTime
	CreatedAt         sql.NullTime
	UpdatedBy         uuid.NullUUID
	Username          sql.NullString
	ProfilePictureUrl sql.NullString
	Name              sql.NullString
	Color             Color
}

func (q *Queries) GetMessagePageByCommunityID(ctx context.Context, arg GetMessagePageByCommunityIDParams) ([]GetMessagePageByCommunityIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessagePageByCommunityID, arg.CommunityID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagePageByCommunityIDRow
	for rows.Next() {
		var i GetMessagePageByCommunityIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CommunityID,
			&i.Content,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.UpdatedBy,
			&i.Username,
			&i.ProfilePictureUrl,
			&i.Name,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
