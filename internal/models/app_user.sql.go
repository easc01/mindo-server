// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: app_user.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createNewAppUser = `-- name: CreateNewAppUser :one
INSERT INTO
    app_user (
        user_id,
        name,
        username,
        email,
        mobile,
        password_hash,
        oauth_client_id,
        updated_by
    )
VALUES (
        $1, -- id
        $2, -- Name
        $3, -- Username
        $4, -- Email
        $5, -- Mobile
        $6, -- Password Hash
        $7, -- OAuth Client ID
        $8 -- Updated By
    ) RETURNING user_id, oauth_client_id, username, profile_picture_url, bio, name, mobile, email, password_hash, last_login_at, updated_at, created_at, updated_by
`

type CreateNewAppUserParams struct {
	UserID        uuid.UUID
	Name          sql.NullString
	Username      sql.NullString
	Email         sql.NullString
	Mobile        sql.NullString
	PasswordHash  sql.NullString
	OauthClientID sql.NullString
	UpdatedBy     uuid.NullUUID
}

func (q *Queries) CreateNewAppUser(ctx context.Context, arg CreateNewAppUserParams) (AppUser, error) {
	row := q.db.QueryRowContext(ctx, createNewAppUser,
		arg.UserID,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Mobile,
		arg.PasswordHash,
		arg.OauthClientID,
		arg.UpdatedBy,
	)
	var i AppUser
	err := row.Scan(
		&i.UserID,
		&i.OauthClientID,
		&i.Username,
		&i.ProfilePictureUrl,
		&i.Bio,
		&i.Name,
		&i.Mobile,
		&i.Email,
		&i.PasswordHash,
		&i.LastLoginAt,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getAppUserByClientOAuthID = `-- name: GetAppUserByClientOAuthID :one
SELECT
    u.id AS user_id,
    au.username,
    au.profile_picture_url,
    au.oauth_client_id,
    au.bio,
    au.name,
    au.mobile,
    au.email,
    au.last_login_at,
    au.created_at,
    au.updated_at,
    au.updated_by
FROM app_user au
    JOIN "user" u ON u.id = au.user_id
WHERE
    au.oauth_client_id = $1
`

type GetAppUserByClientOAuthIDRow struct {
	UserID            uuid.UUID
	Username          sql.NullString
	ProfilePictureUrl sql.NullString
	OauthClientID     sql.NullString
	Bio               sql.NullString
	Name              sql.NullString
	Mobile            sql.NullString
	Email             sql.NullString
	LastLoginAt       sql.NullTime
	CreatedAt         sql.NullTime
	UpdatedAt         sql.NullTime
	UpdatedBy         uuid.NullUUID
}

func (q *Queries) GetAppUserByClientOAuthID(ctx context.Context, oauthClientID sql.NullString) (GetAppUserByClientOAuthIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAppUserByClientOAuthID, oauthClientID)
	var i GetAppUserByClientOAuthIDRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.ProfilePictureUrl,
		&i.OauthClientID,
		&i.Bio,
		&i.Name,
		&i.Mobile,
		&i.Email,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getAppUserByUserID = `-- name: GetAppUserByUserID :one
SELECT
    u.id AS user_id,
    u.user_type,
    au.username,
    au.profile_picture_url,
    au.oauth_client_id,
    au.bio,
    au.name,
    au.mobile,
    au.email,
    au.last_login_at,
    au.created_at,
    au.updated_at,
    au.updated_by
FROM app_user au
    JOIN "user" u ON u.id = au.user_id
WHERE
    au.user_id = $1
`

type GetAppUserByUserIDRow struct {
	UserID            uuid.UUID
	UserType          UserType
	Username          sql.NullString
	ProfilePictureUrl sql.NullString
	OauthClientID     sql.NullString
	Bio               sql.NullString
	Name              sql.NullString
	Mobile            sql.NullString
	Email             sql.NullString
	LastLoginAt       sql.NullTime
	CreatedAt         sql.NullTime
	UpdatedAt         sql.NullTime
	UpdatedBy         uuid.NullUUID
}

func (q *Queries) GetAppUserByUserID(ctx context.Context, userID uuid.UUID) (GetAppUserByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAppUserByUserID, userID)
	var i GetAppUserByUserIDRow
	err := row.Scan(
		&i.UserID,
		&i.UserType,
		&i.Username,
		&i.ProfilePictureUrl,
		&i.OauthClientID,
		&i.Bio,
		&i.Name,
		&i.Mobile,
		&i.Email,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getAppUserByUsername = `-- name: GetAppUserByUsername :one
SELECT
    u.id AS user_id,
    au.username,
    au.profile_picture_url,
    au.oauth_client_id,
    au.bio,
    au.name,
    au.mobile,
    au.email,
    au.last_login_at,
    au.created_at,
    au.updated_at,
    au.updated_by
FROM app_user au
    JOIN "user" u ON u.id = au.user_id
WHERE
    au.username = $1
`

type GetAppUserByUsernameRow struct {
	UserID            uuid.UUID
	Username          sql.NullString
	ProfilePictureUrl sql.NullString
	OauthClientID     sql.NullString
	Bio               sql.NullString
	Name              sql.NullString
	Mobile            sql.NullString
	Email             sql.NullString
	LastLoginAt       sql.NullTime
	CreatedAt         sql.NullTime
	UpdatedAt         sql.NullTime
	UpdatedBy         uuid.NullUUID
}

func (q *Queries) GetAppUserByUsername(ctx context.Context, username sql.NullString) (GetAppUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getAppUserByUsername, username)
	var i GetAppUserByUsernameRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.ProfilePictureUrl,
		&i.OauthClientID,
		&i.Bio,
		&i.Name,
		&i.Mobile,
		&i.Email,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getAppUserWithInterestsByUserID = `-- name: GetAppUserWithInterestsByUserID :one
SELECT 
    au.user_id,
    au.username,
    au.profile_picture_url,
    au.bio,
    au.name,
    au.mobile,
    au.email,
    au.last_login_at,
    au.created_at,
    au.updated_at,
    au.updated_by,
    COALESCE(
        jsonb_agg(
            jsonb_build_object(
                'id', aui.id,
                'name', COALESCE(aui.name, i.name)
            )
        ) FILTER (WHERE aui.id IS NOT NULL),
        '[]'::jsonb
    ) AS interests
FROM 
    app_user au
LEFT JOIN 
    app_user_interest aui ON au.user_id = aui.app_user_id
LEFT JOIN 
    interest i ON aui.interest_id = i.id
WHERE 
    au.user_id = $1
GROUP BY 
    au.user_id
`

type GetAppUserWithInterestsByUserIDRow struct {
	UserID            uuid.UUID
	Username          sql.NullString
	ProfilePictureUrl sql.NullString
	Bio               sql.NullString
	Name              sql.NullString
	Mobile            sql.NullString
	Email             sql.NullString
	LastLoginAt       sql.NullTime
	CreatedAt         sql.NullTime
	UpdatedAt         sql.NullTime
	UpdatedBy         uuid.NullUUID
	Interests         interface{}
}

func (q *Queries) GetAppUserWithInterestsByUserID(ctx context.Context, userID uuid.UUID) (GetAppUserWithInterestsByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAppUserWithInterestsByUserID, userID)
	var i GetAppUserWithInterestsByUserIDRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.ProfilePictureUrl,
		&i.Bio,
		&i.Name,
		&i.Mobile,
		&i.Email,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Interests,
	)
	return i, err
}

const updateAppUserLastLoginAtByOAuthClientID = `-- name: UpdateAppUserLastLoginAtByOAuthClientID :one
UPDATE app_user
SET
    last_login_at = now()
WHERE
    oauth_client_id = $1 RETURNING user_id,
    username,
    profile_picture_url,
    bio,
    name,
    mobile,
    email,
    oauth_client_id,
    last_login_at,
    created_at,
    updated_at,
    updated_by
`

type UpdateAppUserLastLoginAtByOAuthClientIDRow struct {
	UserID            uuid.UUID
	Username          sql.NullString
	ProfilePictureUrl sql.NullString
	Bio               sql.NullString
	Name              sql.NullString
	Mobile            sql.NullString
	Email             sql.NullString
	OauthClientID     sql.NullString
	LastLoginAt       sql.NullTime
	CreatedAt         sql.NullTime
	UpdatedAt         sql.NullTime
	UpdatedBy         uuid.NullUUID
}

func (q *Queries) UpdateAppUserLastLoginAtByOAuthClientID(ctx context.Context, oauthClientID sql.NullString) (UpdateAppUserLastLoginAtByOAuthClientIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateAppUserLastLoginAtByOAuthClientID, oauthClientID)
	var i UpdateAppUserLastLoginAtByOAuthClientIDRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.ProfilePictureUrl,
		&i.Bio,
		&i.Name,
		&i.Mobile,
		&i.Email,
		&i.OauthClientID,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const updateAppUserLastLoginAtByUsername = `-- name: UpdateAppUserLastLoginAtByUsername :one
UPDATE app_user
SET
    last_login_at = now()
WHERE
    username = $1 RETURNING user_id,
    username,
    profile_picture_url,
    bio,
    name,
    mobile,
    email,
    oauth_client_id,
    last_login_at,
    created_at,
    updated_at,
    updated_by
`

type UpdateAppUserLastLoginAtByUsernameRow struct {
	UserID            uuid.UUID
	Username          sql.NullString
	ProfilePictureUrl sql.NullString
	Bio               sql.NullString
	Name              sql.NullString
	Mobile            sql.NullString
	Email             sql.NullString
	OauthClientID     sql.NullString
	LastLoginAt       sql.NullTime
	CreatedAt         sql.NullTime
	UpdatedAt         sql.NullTime
	UpdatedBy         uuid.NullUUID
}

func (q *Queries) UpdateAppUserLastLoginAtByUsername(ctx context.Context, username sql.NullString) (UpdateAppUserLastLoginAtByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, updateAppUserLastLoginAtByUsername, username)
	var i UpdateAppUserLastLoginAtByUsernameRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.ProfilePictureUrl,
		&i.Bio,
		&i.Name,
		&i.Mobile,
		&i.Email,
		&i.OauthClientID,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
