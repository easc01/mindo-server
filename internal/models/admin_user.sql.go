// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: admin_user.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createNewAdminUser = `-- name: CreateNewAdminUser :one
INSERT INTO
    admin_user (
        user_id,
        name,
        email,
        password_hash,
        updated_by
    )
VALUES (
        $1, -- id
        $2, -- Name
        $3, -- Email
        $4, -- Password Hash
        $5  -- Updated By
    ) RETURNING user_id, name, email, password_hash, last_login_at, updated_at, created_at, updated_by
`

type CreateNewAdminUserParams struct {
	UserID       uuid.UUID
	Name         sql.NullString
	Email        sql.NullString
	PasswordHash sql.NullString
	UpdatedBy    uuid.NullUUID
}

func (q *Queries) CreateNewAdminUser(ctx context.Context, arg CreateNewAdminUserParams) (AdminUser, error) {
	row := q.db.QueryRowContext(ctx, createNewAdminUser,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.UpdatedBy,
	)
	var i AdminUser
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.LastLoginAt,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getAdminUserByEmail = `-- name: GetAdminUserByEmail :one
SELECT
    u.id AS user_id,
    u.user_type,
    au.name,
    au.email,
    au.password_hash,
    au.last_login_at,
    au.created_at,
    au.updated_at,
    au.updated_by
FROM admin_user au
    JOIN "user" u ON u.id = au.user_id
WHERE
    au.email = $1
`

type GetAdminUserByEmailRow struct {
	UserID       uuid.UUID
	UserType     UserType
	Name         sql.NullString
	Email        sql.NullString
	PasswordHash sql.NullString
	LastLoginAt  sql.NullTime
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	UpdatedBy    uuid.NullUUID
}

func (q *Queries) GetAdminUserByEmail(ctx context.Context, email sql.NullString) (GetAdminUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getAdminUserByEmail, email)
	var i GetAdminUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.UserType,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getAdminUserByUserID = `-- name: GetAdminUserByUserID :one
SELECT
    u.id AS user_id,
    u.user_type,
    au.name,
    au.email,
    au.password_hash,
    au.last_login_at,
    au.created_at,
    au.updated_at,
    au.updated_by
FROM admin_user au
    JOIN "user" u ON u.id = au.user_id
WHERE
    au.user_id = $1
`

type GetAdminUserByUserIDRow struct {
	UserID       uuid.UUID
	UserType     UserType
	Name         sql.NullString
	Email        sql.NullString
	PasswordHash sql.NullString
	LastLoginAt  sql.NullTime
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	UpdatedBy    uuid.NullUUID
}

func (q *Queries) GetAdminUserByUserID(ctx context.Context, userID uuid.UUID) (GetAdminUserByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAdminUserByUserID, userID)
	var i GetAdminUserByUserIDRow
	err := row.Scan(
		&i.UserID,
		&i.UserType,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const updateAdminUserLastLoginByUserId = `-- name: UpdateAdminUserLastLoginByUserId :exec
UPDATE admin_user
SET last_login_at = now()
WHERE user_id = $1
`

func (q *Queries) UpdateAdminUserLastLoginByUserId(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateAdminUserLastLoginByUserId, userID)
	return err
}
