// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: community.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
WITH inserted_message AS (
  INSERT INTO "message" (user_id, community_id, content, updated_by)
  VALUES ($1, $2, $3, $4)
  RETURNING id, user_id, community_id, content, updated_at, created_at, updated_by
)
SELECT 
  im.id, im.user_id, im.community_id, im.content, im.updated_at, im.created_at, im.updated_by, 
  au.name, 
  au.username, 
  au.color, 
  au.profile_picture_url
FROM inserted_message im
JOIN "app_user" au ON au.user_id = im.user_id
`

type CreateMessageParams struct {
	UserID      uuid.UUID
	CommunityID uuid.UUID
	Content     sql.NullString
	UpdatedBy   uuid.NullUUID
}

type CreateMessageRow struct {
	ID                uuid.UUID
	UserID            uuid.UUID
	CommunityID       uuid.UUID
	Content           sql.NullString
	UpdatedAt         sql.NullTime
	CreatedAt         sql.NullTime
	UpdatedBy         uuid.NullUUID
	Name              sql.NullString
	Username          sql.NullString
	Color             Color
	ProfilePictureUrl sql.NullString
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (CreateMessageRow, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.UserID,
		arg.CommunityID,
		arg.Content,
		arg.UpdatedBy,
	)
	var i CreateMessageRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CommunityID,
		&i.Content,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.Name,
		&i.Username,
		&i.Color,
		&i.ProfilePictureUrl,
	)
	return i, err
}

const createNewCommunity = `-- name: CreateNewCommunity :one
INSERT INTO community (title, about, thumbnail_url, logo_url, updated_by)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, title, about, thumbnail_url, logo_url, updated_at, created_at, updated_by
`

type CreateNewCommunityParams struct {
	Title        sql.NullString
	About        sql.NullString
	ThumbnailUrl sql.NullString
	LogoUrl      sql.NullString
	UpdatedBy    uuid.NullUUID
}

func (q *Queries) CreateNewCommunity(ctx context.Context, arg CreateNewCommunityParams) (Community, error) {
	row := q.db.QueryRowContext(ctx, createNewCommunity,
		arg.Title,
		arg.About,
		arg.ThumbnailUrl,
		arg.LogoUrl,
		arg.UpdatedBy,
	)
	var i Community
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.About,
		&i.ThumbnailUrl,
		&i.LogoUrl,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const createNewUserJoinedCommunityById = `-- name: CreateNewUserJoinedCommunityById :exec
INSERT INTO user_joined_community (user_id, community_id, updated_by)
VALUES (
  $1,
  $2,
  $3
)
`

type CreateNewUserJoinedCommunityByIdParams struct {
	UserID      uuid.UUID
	CommunityID uuid.UUID
	UpdatedBy   uuid.NullUUID
}

func (q *Queries) CreateNewUserJoinedCommunityById(ctx context.Context, arg CreateNewUserJoinedCommunityByIdParams) error {
	_, err := q.db.ExecContext(ctx, createNewUserJoinedCommunityById, arg.UserID, arg.CommunityID, arg.UpdatedBy)
	return err
}
