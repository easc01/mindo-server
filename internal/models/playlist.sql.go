// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: playlist.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO
    playlist (
        name,
        description,
        thumbnail_url,
        code,
        interest_id,
        updated_by
    )
VALUES (
        $1, -- Name
        $2, -- Description
        $3, -- Thumbnail URL
        $4, -- unique hexcode of playlist
        $5, -- domain/interest id
        $6 -- Updated By
    ) RETURNING id, interest_id, name, code, description, views, thumbnail_url, updated_at, created_at, updated_by
`

type CreatePlaylistParams struct {
	Name         sql.NullString
	Description  sql.NullString
	ThumbnailUrl sql.NullString
	Code         string
	InterestID   uuid.NullUUID
	UpdatedBy    uuid.NullUUID
}

// Create a new playlist
func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist,
		arg.Name,
		arg.Description,
		arg.ThumbnailUrl,
		arg.Code,
		arg.InterestID,
		arg.UpdatedBy,
	)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.InterestID,
		&i.Name,
		&i.Code,
		&i.Description,
		&i.Views,
		&i.ThumbnailUrl,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getPlaylistByID = `-- name: GetPlaylistByID :one
SELECT id, interest_id, name, code, description, views, thumbnail_url, updated_at, created_at, updated_by FROM playlist WHERE id = $1
`

// Get a playlist by ID
func (q *Queries) GetPlaylistByID(ctx context.Context, id uuid.UUID) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistByID, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.InterestID,
		&i.Name,
		&i.Code,
		&i.Description,
		&i.Views,
		&i.ThumbnailUrl,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
