// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: playlist.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO
    playlist (
        name,
        description,
        thumbnail_url,
        code,
        interest_id,
        updated_by
    )
VALUES (
        $1, -- Name
        $2, -- Description
        $3, -- Thumbnail URL
        $4, -- unique hexcode of playlist
        $5, -- domain/interest id
        $6 -- Updated By
    ) RETURNING id, interest_id, name, code, description, views, thumbnail_url, updated_at, created_at, updated_by
`

type CreatePlaylistParams struct {
	Name         sql.NullString
	Description  sql.NullString
	ThumbnailUrl sql.NullString
	Code         string
	InterestID   uuid.NullUUID
	UpdatedBy    uuid.NullUUID
}

// Create a new playlist
func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist,
		arg.Name,
		arg.Description,
		arg.ThumbnailUrl,
		arg.Code,
		arg.InterestID,
		arg.UpdatedBy,
	)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.InterestID,
		&i.Name,
		&i.Code,
		&i.Description,
		&i.Views,
		&i.ThumbnailUrl,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getAllPlaylistsPreviews = `-- name: GetAllPlaylistsPreviews :many
SELECT
    p.id,
    p.name,
    p.description,
    p.code,
    p.thumbnail_url,
    p.interest_id,
    p.views,
    p.created_at,
    p.updated_at,
    p.updated_by,
    COALESCE(COUNT(t.id), 0) AS topics_count
FROM playlist p
LEFT JOIN topic t ON t.playlist_id = p.id
WHERE $1 = '' OR similarity(p.name, $1) > 0.05
GROUP BY p.id
ORDER BY similarity(p.name, $1) DESC
`

type GetAllPlaylistsPreviewsRow struct {
	ID           uuid.UUID
	Name         sql.NullString
	Description  sql.NullString
	Code         string
	ThumbnailUrl sql.NullString
	InterestID   uuid.NullUUID
	Views        sql.NullInt32
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	UpdatedBy    uuid.NullUUID
	TopicsCount  interface{}
}

func (q *Queries) GetAllPlaylistsPreviews(ctx context.Context, dollar_1 interface{}) ([]GetAllPlaylistsPreviewsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlaylistsPreviews, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPlaylistsPreviewsRow
	for rows.Next() {
		var i GetAllPlaylistsPreviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Code,
			&i.ThumbnailUrl,
			&i.InterestID,
			&i.Views,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.TopicsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylistWithTopics = `-- name: GetPlaylistWithTopics :one
SELECT p.id, p.name, p.description, p.code, p.thumbnail_url, p.views, p.created_at, p.updated_at, p.updated_by, COALESCE(
        json_agg (
            t.name
            ORDER BY t.number ASC
        ), '[]'
    ) AS topics
FROM playlist p
    LEFT JOIN topic t ON p.id = t.playlist_id
WHERE
    p.id = $1
GROUP BY
    p.id
`

type GetPlaylistWithTopicsRow struct {
	ID           uuid.UUID
	Name         sql.NullString
	Description  sql.NullString
	Code         string
	ThumbnailUrl sql.NullString
	Views        sql.NullInt32
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	UpdatedBy    uuid.NullUUID
	Topics       interface{}
}

// unused, left for reference
func (q *Queries) GetPlaylistWithTopics(ctx context.Context, id uuid.UUID) (GetPlaylistWithTopicsRow, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistWithTopics, id)
	var i GetPlaylistWithTopicsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Code,
		&i.ThumbnailUrl,
		&i.Views,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.Topics,
	)
	return i, err
}

const updatePlaylistViewCountById = `-- name: UpdatePlaylistViewCountById :exec
UPDATE playlist SET views = views + $2 WHERE id = $1
`

type UpdatePlaylistViewCountByIdParams struct {
	ID    uuid.UUID
	Views sql.NullInt32
}

func (q *Queries) UpdatePlaylistViewCountById(ctx context.Context, arg UpdatePlaylistViewCountByIdParams) error {
	_, err := q.db.ExecContext(ctx, updatePlaylistViewCountById, arg.ID, arg.Views)
	return err
}
